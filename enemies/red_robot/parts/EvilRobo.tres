[gd_resource type="SpatialMaterial" load_steps=7 format=2]

[ext_resource path="res://enemies/red_robot/textures/red_robot_emission.png" type="Texture" id=1]
[ext_resource path="res://enemies/red_robot/textures/red_robot_normal.png" type="Texture" id=2]
[ext_resource path="res://enemies/red_robot/textures/red_robot_orm.png" type="Texture" id=3]
[ext_resource path="res://enemies/red_robot/textures/red_robot_albedo.png" type="Texture" id=4]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode cull_disabled;

uniform float grow_factor = 0.05;
uniform vec4 electricity_color:hint_color = vec4(0.0,1.0,1.0,1.0);
uniform float emission_energy = 1.0;
uniform float speed_scale = 0.2;
uniform float emission_cutout = 0.0;

varying vec3 vertex_local_coords;
varying vec3 vert_random;

// CODE FROM Nikita Miropolskiy
// https://www.shadertoy.com/view/XsX3zB
vec3 random3(vec3 c) {
	float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
	vec3 r;
	r.z = fract(512.0*j);
	j *= .125;
	r.x = fract(512.0*j);
	j *= .125;
	r.y = fract(512.0*j);
	return r-0.5;
}

/* skew constants for 3d simplex functions */
const float F3 =  0.3333333;
const float G3 =  0.1666667;

/* 3d simplex noise */
float simplex3d(vec3 p) {
	 /* 1. find current tetrahedron T and it's four vertices */
	 /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */
	 /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/

	 /* calculate s and x */
	 vec3 s = floor(p + dot(p, vec3(F3)));
	 vec3 x = p - s + dot(s, vec3(G3));

	 /* calculate i1 and i2 */
	 vec3 e = step(vec3(0.0), x - x.yzx);
	 vec3 i1 = e*(1.0 - e.zxy);
	 vec3 i2 = 1.0 - e.zxy*(1.0 - e);

	 /* x1, x2, x3 */
	 vec3 x1 = x - i1 + G3;
	 vec3 x2 = x - i2 + 2.0*G3;
	 vec3 x3 = x - 1.0 + 3.0*G3;

	 /* 2. find four surflets and store them in d */
	 vec4 w, d;

	 /* calculate surflet weights */
	 w.x = dot(x, x);
	 w.y = dot(x1, x1);
	 w.z = dot(x2, x2);
	 w.w = dot(x3, x3);

	 /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */
	 w = max(0.6 - w, 0.0);

	 /* calculate surflet components */
	 d.x = dot(random3(s), x);
	 d.y = dot(random3(s + i1), x1);
	 d.z = dot(random3(s + i2), x2);
	 d.w = dot(random3(s + 1.0), x3);

	 /* multiply d by w^4 */
	 w *= w;
	 w *= w;
	 d *= w;

	 /* 3. return the sum of the four surflets */
	 return dot(d, vec4(52.0));
}

// END OF CODE FROM Nikita Miropolskiy

void vertex(){
	VERTEX += NORMAL * grow_factor;
	vertex_local_coords = VERTEX;
	vert_random = random3(VERTEX);
}

void fragment(){
	float noise1 = simplex3d(vertex_local_coords + vec3(0.0,TIME * speed_scale,0.0) + vert_random);
	float noise2 = simplex3d(vertex_local_coords * 0.6 + vec3(0.0,-TIME * speed_scale,0.0));
	// we take the intersection of the 2 noises by multiplying them
	// and max it between 0.0 and 0.001 using smoothstep
	ALPHA = 1.0 - smoothstep(0.002, 0.005 + emission_cutout, abs(noise1*noise2));
	ALPHA *= noise2 + emission_cutout;
	ALPHA = max(0.0, ALPHA) ;
	ALBEDO = electricity_color.rgb;
	EMISSION = ALBEDO * (emission_energy + emission_cutout * emission_energy) ;
//	ALPHA = noise2 * noise1;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/grow_factor = 0.01
shader_param/electricity_color = Color( 0, 1, 1, 1 )
shader_param/emission_energy = 1.0
shader_param/speed_scale = 0.3
shader_param/emission_cutout = 0.0

[resource]
resource_name = "EvilRobo"
next_pass = SubResource( 2 )
params_diffuse_mode = 1
albedo_texture = ExtResource( 4 )
metallic = 0.5
metallic_texture = ExtResource( 3 )
metallic_texture_channel = 2
roughness_texture = ExtResource( 3 )
roughness_texture_channel = 1
emission_enabled = true
emission = Color( 0, 0, 0, 1 )
emission_energy = 4.0
emission_operator = 0
emission_on_uv2 = false
emission_texture = ExtResource( 1 )
normal_enabled = true
normal_scale = 1.0
normal_texture = ExtResource( 2 )
ao_enabled = true
ao_light_affect = 0.0
ao_texture = ExtResource( 3 )
ao_on_uv2 = false
ao_texture_channel = 0
